openapi: 3.0.0
info:
  title: casanet-local-server
  description: IoT server for local home network - Server side
  contact:
    name: Haim Kastner
    url: https://github.com/casanet/casanet-server
    email: haim.kastner@gmail.com
  license:
    name: ISC
  version: 4.0.38
servers:
- url: https://demo.remote.casanet.casa/API
paths:
  /actions:
    get:
      tags:
      - Actions
      description: Get all the actions in the system.
      operationId: GetActions
      parameters: []
      responses:
        "200":
          description: Actions array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
    post:
      tags:
      - Actions
      description: Creates a new action.
      operationId: CreateAction
      parameters: []
      requestBody:
        description: The new action to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "200":
          description: The created action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
  /actions/{actionId}:
    get:
      tags:
      - Actions
      description: Get action by id.
      operationId: GetAction
      parameters:
      - name: actionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
    put:
      tags:
      - Actions
      description: Update action properties.
      operationId: SetAction
      parameters:
      - name: actionId
        in: path
        description: Action id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Action object to update to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
    delete:
      tags:
      - Actions
      description: Delete action from the system.
      operationId: DeleteAction
      parameters:
      - name: actionId
        in: path
        description: Action id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
  /actions/minion/{minionId}:
    get:
      tags:
      - Actions
      description: Get minion's actions.
      operationId: GetActionByMinion
      parameters:
      - name: minionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Action.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
  /actions/set-active/{actionId}:
    put:
      tags:
      - Actions
      description: Set action active mode
      operationId: SetActionActive
      parameters:
      - name: actionId
        in: path
        description: The action to set
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: active
        in: query
        description: The mode to set
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Actions
  /auth/login:
    post:
      tags:
      - Authentication
      description: Login.
      operationId: Login
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "201":
          description: 2-factors code sent
        "204":
          description: No content
        "403":
          description: Auth fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      x-swagger-router-controller: Authentication
  /auth/login/tfa:
    post:
      tags:
      - Authentication
      description: 2-step verification login.
      operationId: LoginTfa
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginMfa'
        required: true
      responses:
        "204":
          description: No content
        "403":
          description: Auth fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      x-swagger-router-controller: Authentication
  /auth/logout:
    post:
      tags:
      - Authentication
      description: Logout manually from the system.
      operationId: Logout
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Authentication
  /auth/logout-sessions/{userId}:
    post:
      tags:
      - Authentication
      description: Logout from all activate sessions.
      operationId: LogoutSessions
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Authentication
  /backup:
    get:
      description: Get the current server data as a ZIP file
      operationId: GetSettingsBackup
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Default
  /collections:
    get:
      tags:
      - Collections
      description: Get all the collections in the system.
      operationId: GetCollections
      parameters: []
      responses:
        "200":
          description: Collections array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Collections
    post:
      tags:
      - Collections
      description: Creates a new collection.
      operationId: CreateCollection
      parameters: []
      requestBody:
        description: The new collection to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        "200":
          description: The created collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Collections
  /collections/{collectionId}:
    get:
      tags:
      - Collections
      description: Get collection by id.
      operationId: GetCollection
      parameters:
      - name: collectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Collections
    put:
      tags:
      - Collections
      description: Update collection properties.
      operationId: SetCollection
      parameters:
      - name: collectionId
        in: path
        description: Collection id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Collection object to update to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Collections
    delete:
      tags:
      - Collections
      description: Delete collection from the system.
      operationId: DeleteCollection
      parameters:
      - name: collectionId
        in: path
        description: Collection id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Collections
  /devices:
    get:
      tags:
      - Devices
      description: Get all devices in the local network.
      operationId: GetDevices
      parameters: []
      responses:
        "200":
          description: Local network devices array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalNetworkDevice'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Devices
  /devices/kinds:
    get:
      tags:
      - Devices
      description: Get all supported devices kind info.
      operationId: GetDevicesKinds
      parameters: []
      responses:
        "200":
          description: Local network devices array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceKind'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Devices
  /devices/{deviceMac}:
    put:
      tags:
      - Devices
      description: Set name to a device.
      operationId: SetDeviceName
      parameters:
      - name: deviceMac
        in: path
        description: Device mac address.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalNetworkDevice'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Devices
  /devices/rescan:
    post:
      tags:
      - Devices
      description: |-
        Rescan all devices in LAN.
        Used when there are changes in the local network.
        For example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc.
      operationId: RescanDevices
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Devices
  /feed/minions:
    get:
      tags:
      - Feeds
      description: |-
        Minions feed.
        when minion status changed minion created etc.
      operationId: GetMinionsFeed
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinionFeed'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Feeds
  /feed/timings:
    get:
      tags:
      - Feeds
      description: |-
        Timing feed.
        when timing activated.
      operationId: GetTimingFeed
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimingFeed'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Feeds
  /logs:
    get:
      description: Get the last logs of the local-server (download as text file)
      operationId: GetLastLogs
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Default
  /minions/timeline:
    get:
      tags:
      - Minions
      description: Get the timeline of minions status.
      operationId: GetMinionsTimeline
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinionTimeline'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/timeline/{minionId}:
    get:
      tags:
      - Minions
      description: Get the timeline of minions status.
      operationId: GetMinionTimeline
      parameters:
      - name: minionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinionTimeline'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/timeout:
    get:
      tags:
      - Minions
      description: Update minion auto turns off timeout.
      operationId: GetMinionsTimeout
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinionTimeout'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/timeout/restart/{minionId}:
    post:
      tags:
      - Minions
      description: URestart minion timeout countdown.
      operationId: RestartMinionTimeout
      parameters:
      - name: minionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/timeout/{minionId}:
    put:
      tags:
      - Minions
      description: Update minion auto turns off timeout.
      operationId: SetMinionTimeout
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Timeout property.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetMinionAutoTurnOff'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/power-off:
    put:
      tags:
      - Minions
      description: Power off all minions
      operationId: PowerAllOff
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/rename/{minionId}:
    put:
      tags:
      - Minions
      description: Update minion name.
      operationId: RenameMinion
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The new name to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionRename'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/room/{minionId}:
    put:
      tags:
      - Minions
      description: Update minion room name.
      operationId: RenameRoom
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Minion room name to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionSetRoomName'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/network-device/{minionId}:
    put:
      tags:
      - Minions
      description: Replace physical device of given minion.
      operationId: ReplaceNetworkDevice
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Device mac address to replace to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionSetDevice'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/calibrate/{minionId}:
    put:
      tags:
      - Minions
      description: Update minion auto turns off timeout.
      operationId: SetMinionCalibrate
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionCalibrate'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/rescan/{minionId}:
    post:
      tags:
      - Minions
      description: Recheck minion device status (update server status cache).
      operationId: RescanMinionStatus
      parameters:
      - name: minionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/rescan:
    get:
      tags:
      - Minions
      description: Get the current scanning status
      operationId: GetSescaningMinionsStatus
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanningStatus'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
    post:
      tags:
      - Minions
      description: |-
        Recheck every minion device status (update server status cache).
        Note that this is not the devices scan!
        This scanning only checks every minion API to know the current status.
      operationId: RescanMinionsStatus
      parameters:
      - name: scanNetwork
        in: query
        description: Whenever scan also the local networks IP's map or not
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/restrictions/{minionId}:
    put:
      tags:
      - Minions
      description: Set minion access restrictions
      operationId: SetMinionRestriction
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The collection of restriction to set.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RestrictionItem'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions/{minionId}:
    get:
      tags:
      - Minions
      description: Get minion by id.
      operationId: GetMinion
      parameters:
      - name: minionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Minion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Minion'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
    put:
      tags:
      - Minions
      description: Update minion status.
      operationId: SetMinion
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Minion status to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionStatus'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
    delete:
      tags:
      - Minions
      description: Delete minion from the system.
      operationId: DeleteMinion
      parameters:
      - name: minionId
        in: path
        description: Minion id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /minions:
    get:
      tags:
      - Minions
      description: Get all minions in the system.
      operationId: GetMinions
      parameters: []
      responses:
        "200":
          description: Minions array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Minion'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
    post:
      tags:
      - Minions
      description: Creates a new minion.
      operationId: CreateMinion
      parameters: []
      requestBody:
        description: The new minion to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Minion'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Minions
  /operations:
    get:
      tags:
      - Operations
      description: Get all operations in the system.
      operationId: GetOperations
      parameters: []
      responses:
        "200":
          description: Operations array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
    post:
      tags:
      - Operations
      description: Creates a new operation.
      operationId: CreateOperation
      parameters: []
      requestBody:
        description: The new operation to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
  /operations/{operationId}:
    get:
      tags:
      - Operations
      description: Get operation by id.
      operationId: GetOperation
      parameters:
      - name: operationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
    put:
      tags:
      - Operations
      description: Update operation properties.
      operationId: SetOperation
      parameters:
      - name: operationId
        in: path
        description: OperationId id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Operation object to update to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
    delete:
      tags:
      - Operations
      description: Delete operation from the system.
      operationId: DeleteOperation
      parameters:
      - name: operationId
        in: path
        description: Operation id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
  /operations/trigger/{operationId}:
    post:
      tags:
      - Operations
      description: Invoke operation.
      operationId: TriggerOperation
      parameters:
      - name: operationId
        in: path
        description: Operation id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Array of minions set status errors (if any).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationResult'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
      security:
      - adminAuth: []
      x-swagger-router-controller: Operations
  /rf/devices:
    get:
      tags:
      - RF
      description: Get all aupported devices in commands repo see https://github.com/casanet/rf-commands-repo
        API.
      operationId: GetCommandsRepoAvailableDevices
      parameters: []
      responses:
        "200":
          description: supported devices collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommandsRepoDevice'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: RF
  /rf/fetch-commands/{minionId}:
    put:
      tags:
      - RF
      description: Fetch commands set for certain minion see https://github.com/casanet/rf-commands-repo
        API.
      operationId: FetchDeviceCommandsToMinion
      parameters:
      - name: minionId
        in: path
        description: minion to fetch commands for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: devices commands set to fetch.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandsRepoDevice'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: RF
  /rf/record/{minionId}:
    post:
      tags:
      - RF
      description: |-
        Record a command (IR, 433-RF or any other supported RF tech)
        for current minion status.
      operationId: RecordMinionCommand
      parameters:
      - name: minionId
        in: path
        description: Minon id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Minion object status to get command for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionStatus'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: RF
  /rf/generate/{minionId}:
    post:
      tags:
      - RF
      description: |-
        Generate a command (IR, 433-RF or any other supported RF tech)
        for current minion status.
      operationId: GenerateMinionCommand
      parameters:
      - name: minionId
        in: path
        description: Minon id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Minion object status to generate command for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinionStatus'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: RF
  /remote:
    get:
      tags:
      - Remote
      description: |-
        Get remote server host/IP.
        or empty if not set.
      operationId: GetRemoteHost
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Remote
    put:
      tags:
      - Remote
      description: Connect to remote server with given remote settings.
      operationId: SetRemoteSettings
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteSettings'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Remote
    delete:
      tags:
      - Remote
      description: Remove and disconnect remote server connection.
      operationId: RemoveRemoteSettings
      parameters: []
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Remote
  /remote/status:
    get:
      tags:
      - Remote
      description: Get connection status to remote status.
      operationId: GetConnectionStatus
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnectionStatus'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Remote
  /remote/machine-mac:
    get:
      tags:
      - Remote
      description: |-
        Get local casa-server machine mac address.
        Used when creating a new local server in a remote server.
      operationId: GetMachineMac
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Remote
  /timings:
    get:
      tags:
      - Timings
      description: Get all the timings in the system.
      operationId: GetTimings
      parameters: []
      responses:
        "200":
          description: Timings array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timing'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Timings
    post:
      tags:
      - Timings
      description: Creates a new timing.
      operationId: CreateTiming
      parameters: []
      requestBody:
        description: The new timing to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timing'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Timings
  /timings/{timingId}:
    get:
      tags:
      - Timings
      description: Get timing by id.
      operationId: GetTiming
      parameters:
      - name: timingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Timing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timing'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Timings
    put:
      tags:
      - Timings
      description: Update timing properties.
      operationId: SetTiming
      parameters:
      - name: timingId
        in: path
        description: Timing id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Timing object to update to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timing'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Timings
    delete:
      tags:
      - Timings
      description: Delete timing from the system.
      operationId: DeleteTiming
      parameters:
      - name: timingId
        in: path
        description: Timing id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - userAuth: []
      - adminAuth: []
      x-swagger-router-controller: Timings
  /users/profile:
    get:
      tags:
      - Users
      description: Get user profile.
      operationId: GetProfile
      parameters: []
      responses:
        "200":
          description: User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
  /users/forward-auth/{userId}:
    post:
      tags:
      - Users
      description: Request registration code.
      operationId: RequestUserForwarding
      parameters:
      - name: userId
        in: path
        description: User id/email to send code to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
  /users/forward:
    get:
      tags:
      - Users
      description: Get registered users for forwarding from remote to local.
      operationId: GetRegisteredUsers
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
  /users/forward/{userId}:
    post:
      tags:
      - Users
      description: Register account to allow forward HTTP requests from remote to
        local server.
      operationId: RequestUserForwardingAuth
      parameters:
      - name: userId
        in: path
        description: User id/email to register.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForwardAuth'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
    delete:
      tags:
      - Users
      description: Remove account from local server valid account to forward from
        remote to local
      operationId: RemoveUserForwarding
      parameters:
      - name: userId
        in: path
        description: User id/email to unregister.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
  /users:
    get:
      tags:
      - Users
      description: Get all users in the system.
      operationId: GetUsers
      parameters: []
      responses:
        "200":
          description: Users array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Users
    post:
      tags:
      - Users
      description: Creates a new user.
      operationId: CreateUser
      parameters: []
      requestBody:
        description: The new user to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Users
  /users/{userId}:
    get:
      tags:
      - Users
      description: Get user by id.
      operationId: GetUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
    put:
      tags:
      - Users
      description: Update user properties.
      operationId: SetUser
      parameters:
      - name: userId
        in: path
        description: User id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: User object to update to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
    delete:
      tags:
      - Users
      description: Delete user from the system.
      operationId: DeleteUser
      parameters:
      - name: userId
        in: path
        description: User id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Users
  /version/latest:
    put:
      tags:
      - Version
      description: Update Casanet application to the latest version (Restart required
        for the version update complete).
      operationId: UpdateVersion
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResults'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      x-swagger-router-controller: Version
  /version/update-status:
    get:
      tags:
      - Version
      description: Get current version update progress status
      operationId: GetUpdateStatus
      parameters: []
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionUpdateStatus'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Version
  /version:
    get:
      tags:
      - Version
      description: Get current version.
      operationId: GetCurrentVersion
      parameters: []
      responses:
        "200":
          description: Current version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Version
  /version/is-up-date:
    get:
      tags:
      - Version
      description: "Detect if the current version is last, and if not return the latest\
        \ version."
      operationId: IsLatestVersion
      parameters: []
      responses:
        "200":
          description: "Empty if latest, if not the version name."
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "501":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - adminAuth: []
      - userAuth: []
      x-swagger-router-controller: Version
components:
  schemas:
    SwitchOptions:
      type: string
      description: Switches option
      enum:
      - "on"
      - "off"
    Toggle:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
      additionalProperties: false
      description: |-
        A toggle value, the toggle is on way communicated device,
        For example wall light switches with 433 RF that can turn on or off
        but there is no way to know the real light status if someone changes the light status using physical switch.
      example:
        status: "on"
    Switch:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
      additionalProperties: false
      description: |-
        A switch status.
         Used for simple devices that can be turned on or off. *and minion status is readable*
        The properties same as a toggle, and the difference is logic only (if that status is readable or not).
      example:
        status: null
    RollerDirection:
      type: string
      description: Roller direction
      enum:
      - up
      - down
    Roller:
      required:
      - direction
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        direction:
          $ref: '#/components/schemas/RollerDirection'
      additionalProperties: false
      description: |-
        A roller switch status.
        A roller is a switch for curtains or blinds (or for any other needs) that can drag up/down or stop.
      example:
        status: null
        direction: up
    CleanerMode:
      type: string
      description: Cleaner mode
      enum:
      - dock
      - clean
    FanStrengthOptions:
      type: string
      description: Valid fan strength.
      enum:
      - low
      - med
      - high
      - auto
    Cleaner:
      required:
      - fanSpeed
      - mode
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        mode:
          $ref: '#/components/schemas/CleanerMode'
        fanSpeed:
          $ref: '#/components/schemas/FanStrengthOptions'
      additionalProperties: false
      description: |-
        A Cleaner (robot) status.
        Cleaner is a smart robot for cleaning home.
      example:
        mode: dock
        fanSpeed: low
        status: null
    ACModeOptions:
      type: string
      description: Valid AC mode.
      enum:
      - hot
      - cold
      - dry
      - auto
    AirConditioning:
      required:
      - fanStrength
      - mode
      - status
      - temperature
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        temperature:
          maximum: 30
          minimum: 16
          type: integer
          description: Valid AC temperature. (minimum 16° maximum 30°).
          format: int32
        mode:
          $ref: '#/components/schemas/ACModeOptions'
        fanStrength:
          $ref: '#/components/schemas/FanStrengthOptions'
      additionalProperties: false
      description: An AC status.
      example:
        mode: hot
        temperature: 17
        fanStrength: null
        status: null
    Light:
      required:
      - brightness
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        brightness:
          maximum: 100
          minimum: 1
          type: integer
          description: Minimum 1% maximum 100% of light brightness.
          format: int32
      additionalProperties: false
      description: |-
        A simple light status.
        Used to devices that can chang it's brightness.
      example:
        brightness: 60
        status: null
    TemperatureLight:
      required:
      - brightness
      - status
      - temperature
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        brightness:
          maximum: 100
          minimum: 1
          type: integer
          description: Minimum 1% maximum 100% of light brightness.
          format: int32
        temperature:
          maximum: 100
          minimum: 1
          type: integer
          description: Spectrum is 1% to warm light and 100% to cold light.
          format: int32
      additionalProperties: false
      description: |-
        A light simple light status.
        Used to devices that can chang also light temperature (warm or cold light).
      example:
        brightness: 15
        temperature: 60
        status: null
    ColorLight:
      required:
      - blue
      - brightness
      - green
      - red
      - status
      - temperature
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        brightness:
          maximum: 100
          minimum: 1
          type: integer
          description: Minimum 1% maximum 100% of light brightness.
          format: int32
        temperature:
          maximum: 100
          minimum: 1
          type: integer
          description: Spectrum is 1% to warm light and 100% to cold light.
          format: int32
        red:
          maximum: 255
          minimum: 0
          type: integer
          description: |-
            Minimum 0 maximum 255 from red color.
            Valid color value. (8 bits number, minimum 0 maximum 255).
          format: int32
        green:
          maximum: 255
          minimum: 0
          type: integer
          description: |-
            Minimum 0 maximum 255 from green color.
            Valid color value. (8 bits number, minimum 0 maximum 255).
          format: int32
        blue:
          maximum: 255
          minimum: 0
          type: integer
          description: |-
            Minimum 0 maximum 255 from blue color.
            Valid color value. (8 bits number, minimum 0 maximum 255).
          format: int32
      additionalProperties: false
      description: |-
        A light simple light status.
        Used to devices that can change also light color (RGB).
      example:
        red: 180
        brightness: 56
        green: 237
        blue: 92
        temperature: 23
        status: null
    TemperatureSensor:
      required:
      - status
      - temperature
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SwitchOptions'
        temperature:
          type: number
          description: Temperature in celsius (X°)
          format: double
      additionalProperties: false
      example:
        temperature: 2.027123023002322
        status: null
    MinionStatus:
      type: object
      properties:
        toggle:
          $ref: '#/components/schemas/Toggle'
        switch:
          $ref: '#/components/schemas/Switch'
        roller:
          $ref: '#/components/schemas/Roller'
        cleaner:
          $ref: '#/components/schemas/Cleaner'
        airConditioning:
          $ref: '#/components/schemas/AirConditioning'
        light:
          $ref: '#/components/schemas/Light'
        temperatureLight:
          $ref: '#/components/schemas/TemperatureLight'
        colorLight:
          $ref: '#/components/schemas/ColorLight'
        temperatureSensor:
          $ref: '#/components/schemas/TemperatureSensor'
      additionalProperties: false
      description: "Minion status, the available values depend on the minion type."
      example:
        airConditioning:
          mode: hot
          temperature: 17
          fanStrength: null
          status: null
        temperatureSensor:
          temperature: 2.027123023002322
          status: null
        light:
          brightness: 60
          status: null
        cleaner:
          mode: dock
          fanSpeed: low
          status: null
        toggle:
          status: "on"
        temperatureLight:
          brightness: 15
          temperature: 60
          status: null
        roller:
          status: null
          direction: up
        colorLight:
          red: 180
          brightness: 56
          green: 237
          blue: 92
          temperature: 23
          status: null
        switch:
          status: null
    ActionSet:
      required:
      - minionId
      - setStatus
      type: object
      properties:
        minionId:
          type: string
          description: The minion to set
        setStatus:
          $ref: '#/components/schemas/MinionStatus'
      additionalProperties: false
      description: The action set to do on an action trigger
      example:
        minionId: minionId
        setStatus: null
    ActionApply:
      type: string
      description: |-
        The triggers types.
        - 'statusChange' to invoke only on status change, but allow change later the status
        - 'permanent' at while the status of the minion of action trigger still on the triggered status, force the action, always.
      enum:
      - statusChange
      - permanent
    Action:
      required:
      - actionId
      - active
      - apply
      - ifStatus
      - minionId
      - thenSet
      type: object
      properties:
        actionId:
          type: string
          description: The action id
        minionId:
          type: string
          description: The minion where his status will trigger this action set
        active:
          type: boolean
          description: Whenever the action is active
        name:
          type: string
          description: "Free text, as the action name"
        ifStatus:
          $ref: '#/components/schemas/MinionStatus'
        thenSet:
          type: array
          description: The actions set to invoke in case of this action trigger
          items:
            $ref: '#/components/schemas/ActionSet'
        apply:
          $ref: '#/components/schemas/ActionApply'
      additionalProperties: false
      description: An action to trigger some minion/s status in case minion has some
        status
      example:
        apply: statusChange
        ifStatus:
          airConditioning:
            mode: hot
            temperature: 17
            fanStrength: null
            status: null
          temperatureSensor:
            temperature: 2.027123023002322
            status: null
          light:
            brightness: 60
            status: null
          cleaner:
            mode: dock
            fanSpeed: low
            status: null
          toggle:
            status: "on"
          temperatureLight:
            brightness: 15
            temperature: 60
            status: null
          roller:
            status: null
            direction: up
          colorLight:
            red: 180
            brightness: 56
            green: 237
            blue: 92
            temperature: 23
            status: null
          switch:
            status: null
        name: name
        thenSet:
        - minionId: minionId
          setStatus: null
        - minionId: minionId
          setStatus: null
        actionId: actionId
        active: true
        minionId: minionId
    ErrorResponse:
      required:
      - responseCode
      type: object
      properties:
        responseCode:
          type: number
          description: error code in system.
          format: double
        message:
          type: string
          description: Readable message.
      additionalProperties: false
      description: Error response.
      example:
        message: message
        responseCode: 7.061401241503109
    Login:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        localServerId:
          type: string
          description: Optional for remote request forwards only
      additionalProperties: false
      description: Login schema model.
    LoginMfa:
      required:
      - email
      - mfa
      type: object
      properties:
        email:
          type: string
        mfa:
          type: string
        localServerId:
          type: string
          description: Optional for remote request forwards only
      additionalProperties: false
    CollectionItem:
      required:
      - itemId
      type: object
      properties:
        itemId:
          type: string
          description: "The item id, can be minion, timing, device etc"
      additionalProperties: false
      example:
        itemId: itemId
    Collection:
      required:
      - collectionId
      - collectionName
      - items
      type: object
      properties:
        collectionId:
          type: string
          description: The action id
        collectionName:
          type: string
          description: The trigger to apply the action
        items:
          type: array
          description: The collection items
          items:
            $ref: '#/components/schemas/CollectionItem'
      additionalProperties: false
      description: "An collection of items, can be used for view aggregation of any\
        \ item/s in the system"
      example:
        collectionId: collectionId
        items:
        - itemId: itemId
        - itemId: itemId
        collectionName: collectionName
    DeviceStatus:
      type: object
      properties:
        battery:
          type: number
          description: "The battery power, if relevant, in %."
          format: double
        charging:
          type: boolean
          description: Is the device in charging mode
      additionalProperties: false
      example:
        charging: true
        battery: 0.8008281904610115
    LocalNetworkDevice:
      required:
      - mac
      type: object
      properties:
        name:
          type: string
          description: Display name.
        mac:
          type: string
          description: "The MAC address of the device, the value is unique to each\
            \ device."
        vendor:
          type: string
          description: Info about device manufacturer.
        ip:
          type: string
          description: "The device IP address, if exist it should be unique in network."
        deviceStatus:
          $ref: '#/components/schemas/DeviceStatus'
      additionalProperties: false
      description: Represents any physical device in a local network.
      example:
        vendor: vendor
        ip: ip
        name: name
        mac: mac
        deviceStatus:
          charging: true
          battery: 0.8008281904610115
    MinionTypes:
      type: string
      description: Supported minions types.
      enum:
      - toggle
      - switch
      - temperatureSensor
      - roller
      - cleaner
      - airConditioning
      - light
      - temperatureLight
      - colorLight
    DeviceKind:
      required:
      - brand
      - isFetchCommandsAvailable
      - isIdRequired
      - isRecordingSupported
      - isTokenRequired
      - minionsPerDevice
      - model
      - supportedMinionType
      type: object
      properties:
        brand:
          type: string
          description: The brand of the current minion type. (see device model).
        model:
          type: string
          description: The specific model of minion type. (see device model).
        minionsPerDevice:
          type: number
          description: |-
            The max minions that can be in one device, or -1 if unlimited.
            For example, a simple smart socket can be 1 minion per device,
            Wall switch with 3 switches can be 3 minions per device,
            And IR transmitter can be unlimited minions per device.
          format: double
        isTokenRequired:
          type: boolean
          description: Is the device require a token for communication API.
        isIdRequired:
          type: boolean
          description: Is device require id for communication API.
        supportedMinionType:
          $ref: '#/components/schemas/MinionTypes'
        isRecordingSupported:
          type: boolean
          description: Some of the devices supported recording (for example IR transmitter).
        isFetchCommandsAvailable:
          type: boolean
          description: "Whenever the device and module supported fetching commands\
            \ data from \nthe https://github.com/casanet/rf-commands-repo project"
      additionalProperties: false
      description: "For each supported device, there are limitations and abilities\
        \ of it."
      example:
        isFetchCommandsAvailable: true
        isIdRequired: true
        isTokenRequired: true
        model: model
        minionsPerDevice: 0.8008281904610115
        supportedMinionType: toggle
        brand: brand
        isRecordingSupported: true
    FeedEvent:
      type: string
      description: Feed update type enum.
      enum:
      - created
      - update
      - removed
    MinionDevice:
      required:
      - brand
      - model
      - pysicalDevice
      type: object
      properties:
        pysicalDevice:
          $ref: '#/components/schemas/LocalNetworkDevice'
        brand:
          type: string
          description: The brand of device.
        model:
          type: string
          description: The specific model of the device.
        token:
          type: string
          description: Some devices require a token for communication API.
        deviceId:
          type: string
          description: Some devices require id for communication API.
      additionalProperties: false
      description: Represents a physical device kind with network info.
      example:
        pysicalDevice:
          vendor: vendor
          ip: ip
          name: name
          mac: mac
          deviceStatus:
            charging: true
            battery: 0.8008281904610115
        model: model
        brand: brand
        deviceId: deviceId
        token: token
    CalibrationMode:
      type: string
      enum:
      - LOCK_ON
      - LOCK_OFF
      - SHABBAT
      - AUTO
      - LOCK_DASHBOARD
    MinionCalibrate:
      required:
      - calibrationCycleMinutes
      - calibrationMode
      type: object
      properties:
        calibrationCycleMinutes:
          minimum: 0
          type: integer
          description: "Minutes to calibrate status, set 0 to turn off calibration"
          format: int32
        calibrationMode:
          $ref: '#/components/schemas/CalibrationMode'
      additionalProperties: false
      description: Used to change the minion calibration property value.
      example:
        calibrationCycleMinutes: 0
        calibrationMode: LOCK_ON
    RestrictionType:
      type: string
      description: Type of resection of access
      enum:
      - BLOCK
      - READ
      - WRITE
    RestrictionItem:
      required:
      - restrictionType
      - userEmail
      type: object
      properties:
        userEmail:
          type: string
          description: The use to restrict
        restrictionType:
          $ref: '#/components/schemas/RestrictionType'
      additionalProperties: false
      example:
        restrictionType: BLOCK
        userEmail: userEmail
    Minion:
      required:
      - device
      - minionStatus
      - minionType
      - name
      type: object
      properties:
        minionId:
          type: string
          description: Minion unique id.
        name:
          type: string
          description: The display name for a minion.
        device:
          $ref: '#/components/schemas/MinionDevice'
        isProperlyCommunicated:
          type: boolean
          description: Is communication with device status ok.
        minionStatus:
          $ref: '#/components/schemas/MinionStatus'
        minionType:
          $ref: '#/components/schemas/MinionTypes'
        minionAutoTurnOffMS:
          type: number
          description: |-
            Auto turns  off duration, *if* set member value then the minion will turn off in X ms after turning it on,
            Used for example in boiler minion etc.
          format: double
        calibration:
          $ref: '#/components/schemas/MinionCalibrate'
        room:
          type: string
          description: Represents the room where the minion is located at.
        statusChangedTime:
          type: number
          description: Last status change timestamp in UTC MS
          format: double
        restrictions:
          type: array
          description: The restriction of access on this minion
          items:
            $ref: '#/components/schemas/RestrictionItem'
      additionalProperties: false
      description: |-
        Represents a minion in system.
        Minion is a logic device in the system, meaning that a device is a physical device and minion is a logic device
        that uses a physical device to switch home kit status. For example, an IR transmitter can be one physical device
        for a few minions, one to central AC control and second for secondary AC control
        so in it will be two totally different minions that use one physical device.
      example:
        minionAutoTurnOffMS: 0.8008281904610115
        isProperlyCommunicated: true
        statusChangedTime: 1.4658129805029452
        minionType: toggle
        name: name
        restrictions:
        - restrictionType: BLOCK
          userEmail: userEmail
        - restrictionType: BLOCK
          userEmail: userEmail
        minionStatus:
          airConditioning:
            mode: hot
            temperature: 17
            fanStrength: null
            status: null
          temperatureSensor:
            temperature: 2.027123023002322
            status: null
          light:
            brightness: 60
            status: null
          cleaner:
            mode: dock
            fanSpeed: low
            status: null
          toggle:
            status: "on"
          temperatureLight:
            brightness: 15
            temperature: 60
            status: null
          roller:
            status: null
            direction: up
          colorLight:
            red: 180
            brightness: 56
            green: 237
            blue: 92
            temperature: 23
            status: null
          switch:
            status: null
        device:
          pysicalDevice:
            vendor: vendor
            ip: ip
            name: name
            mac: mac
            deviceStatus:
              charging: true
              battery: 0.8008281904610115
          model: model
          brand: brand
          deviceId: deviceId
          token: token
        calibration:
          calibrationCycleMinutes: 0
          calibrationMode: LOCK_ON
        minionId: minionId
        room: room
    MinionChangeTrigger:
      type: string
      description: The minion status change triggers
      enum:
      - user
      - device
      - timeout
      - timing
      - action
      - lock
      - sync
      - rotation
      - external
    AuthScopes:
      type: string
      description: |-
        Scopes of authentication, right know in our system there are only 3 scopes.
        admin and user. any API route protect by one of them.
      enum:
      - adminAuth
      - userAuth
    User:
      required:
      - email
      - ignoreTfa
      - scope
      type: object
      properties:
        displayName:
          type: string
          description: Name
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password.
        ignoreTfa:
          type: boolean
          description: Ignore 2-step verification on login or not.
        scope:
          $ref: '#/components/schemas/AuthScopes'
        passwordChangeRequired:
          type: boolean
          description: "Whenever the user required to set new password, during default\
            \ password usage, password expiration, etc."
      additionalProperties: false
      description: Represents a user in the system.
      example:
        password: password
        passwordChangeRequired: true
        displayName: displayName
        scope: adminAuth
        ignoreTfa: true
        email: email
    MinionFeed:
      required:
      - event
      - minion
      - oldMinion
      type: object
      properties:
        event:
          $ref: '#/components/schemas/FeedEvent'
        minion:
          $ref: '#/components/schemas/Minion'
        oldMinion:
          $ref: '#/components/schemas/Minion'
        trigger:
          $ref: '#/components/schemas/MinionChangeTrigger'
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
      description: Minion feed object.
      example:
        oldMinion: null
        trigger: user
        event: created
        minion:
          minionAutoTurnOffMS: 0.8008281904610115
          isProperlyCommunicated: true
          statusChangedTime: 1.4658129805029452
          minionType: toggle
          name: name
          restrictions:
          - restrictionType: BLOCK
            userEmail: userEmail
          - restrictionType: BLOCK
            userEmail: userEmail
          minionStatus:
            airConditioning:
              mode: hot
              temperature: 17
              fanStrength: null
              status: null
            temperatureSensor:
              temperature: 2.027123023002322
              status: null
            light:
              brightness: 60
              status: null
            cleaner:
              mode: dock
              fanSpeed: low
              status: null
            toggle:
              status: "on"
            temperatureLight:
              brightness: 15
              temperature: 60
              status: null
            roller:
              status: null
              direction: up
            colorLight:
              red: 180
              brightness: 56
              green: 237
              blue: 92
              temperature: 23
              status: null
            switch:
              status: null
          device:
            pysicalDevice:
              vendor: vendor
              ip: ip
              name: name
              mac: mac
              deviceStatus:
                charging: true
                battery: 0.8008281904610115
            model: model
            brand: brand
            deviceId: deviceId
            token: token
          calibration:
            calibrationCycleMinutes: 0
            calibrationMode: LOCK_ON
          minionId: minionId
          room: room
        user:
          password: password
          passwordChangeRequired: true
          displayName: displayName
          scope: adminAuth
          ignoreTfa: true
          email: email
    OperationActivity:
      required:
      - minionId
      - minionStatus
      type: object
      properties:
        minionId:
          type: string
          description: Minion id to set
        minionStatus:
          $ref: '#/components/schemas/MinionStatus'
      additionalProperties: false
      description: Represents activity.
      example:
        minionStatus:
          airConditioning:
            mode: hot
            temperature: 17
            fanStrength: null
            status: null
          temperatureSensor:
            temperature: 2.027123023002322
            status: null
          light:
            brightness: 60
            status: null
          cleaner:
            mode: dock
            fanSpeed: low
            status: null
          toggle:
            status: "on"
          temperatureLight:
            brightness: 15
            temperature: 60
            status: null
          roller:
            status: null
            direction: up
          colorLight:
            red: 180
            brightness: 56
            green: 237
            blue: 92
            temperature: 23
            status: null
          switch:
            status: null
        minionId: minionId
    TimingTypes:
      type: string
      description: Supported timings types.
      enum:
      - dailySunTrigger
      - dailyTimeTrigger
      - once
      - timeout
    SunTriggerOptions:
      type: string
      description: Sun triggers.
      enum:
      - sunrise
      - sunset
    DaysOptions:
      type: string
      description: Days in week.
      enum:
      - sunday
      - monday
      - tuesday
      - wednesday
      - thursday
      - friday
      - saturday
    DailySunTrigger:
      required:
      - days
      - durationMinutes
      - sunTrigger
      type: object
      properties:
        days:
          type: array
          description: Selected days in a week.
          items:
            $ref: '#/components/schemas/DaysOptions'
        durationMinutes:
          type: number
          description: |-
            Minutes from the sun trigger.
            can be before or after the sun triggers.
            For example, to invoke 40 minutes before sunset set -40 and to invoke 40 minutes after sunset set 40.

            NOTE! if the duration is more then minutes available in the day from the sun trigger time, the timing will not activate.
            for example if the sunset is in 18:00 and the duration set to 7*60 minutes,
            the activate time is not on the same day, so it will not activate at all.
          format: double
        sunTrigger:
          $ref: '#/components/schemas/SunTriggerOptions'
      additionalProperties: false
      description: Daily timing based on sun triggers.
      example:
        durationMinutes: 0.8008281904610115
        days:
        - sunday
        - sunday
        sunTrigger: sunrise
    DailyTimeTrigger:
      required:
      - days
      - hour
      - minutes
      type: object
      properties:
        days:
          type: array
          description: Selected days in a week.
          items:
            $ref: '#/components/schemas/DaysOptions'
        hour:
          maximum: 23
          minimum: 0
          type: integer
          description: The hour in a day.
          format: int32
        minutes:
          maximum: 59
          minimum: 0
          type: integer
          description: Minutes in an hour.
          format: int32
      additionalProperties: false
      description: Daily timing based on time in a day.
      example:
        hour: 13
        minutes: 8
        days:
        - null
        - null
    OnceTiming:
      required:
      - date
      type: object
      properties:
        date:
          type: number
          description: UTC time.
          format: double
      additionalProperties: false
      description: Once timing structure.
      example:
        date: 5.962133916683182
    TimeoutTiming:
      required:
      - durationInMinutes
      - startDate
      type: object
      properties:
        startDate:
          type: number
          description: UTC time.
          format: double
        durationInMinutes:
          type: number
          description: Duration to activate timing from the start timeout time in
            minutes.
          format: double
      additionalProperties: false
      description: Timeout timing structure.
      example:
        durationInMinutes: 2.3021358869347655
        startDate: 5.637376656633329
    TimingProperties:
      type: object
      properties:
        dailySunTrigger:
          $ref: '#/components/schemas/DailySunTrigger'
        dailyTimeTrigger:
          $ref: '#/components/schemas/DailyTimeTrigger'
        once:
          $ref: '#/components/schemas/OnceTiming'
        timeout:
          $ref: '#/components/schemas/TimeoutTiming'
      additionalProperties: false
      description: "Timing properties, values depend on timing type."
      example:
        dailyTimeTrigger:
          hour: 13
          minutes: 8
          days:
          - null
          - null
        once:
          date: 5.962133916683182
        timeout:
          durationInMinutes: 2.3021358869347655
          startDate: 5.637376656633329
        dailySunTrigger:
          durationMinutes: 0.8008281904610115
          days:
          - sunday
          - sunday
          sunTrigger: sunrise
    Timing:
      required:
      - isActive
      - timingId
      - timingProperties
      - timingType
      type: object
      properties:
        timingId:
          type: string
          description: Timing unique id.
        timingName:
          type: string
          description: Timing display name.
        triggerOperationId:
          type: string
          description: Operation id to invoke (optional).
        triggerDirectAction:
          $ref: '#/components/schemas/OperationActivity'
        isActive:
          type: boolean
          description: Is timing active or not.
        timingType:
          $ref: '#/components/schemas/TimingTypes'
        timingProperties:
          $ref: '#/components/schemas/TimingProperties'
        setLock:
          $ref: '#/components/schemas/CalibrationMode'
        overrideLock:
          type: boolean
          description: "Override lock, if exists (default false)"
      additionalProperties: false
      description: Represents a timing in the system.
      example:
        timingProperties:
          dailyTimeTrigger:
            hour: 13
            minutes: 8
            days:
            - null
            - null
          once:
            date: 5.962133916683182
          timeout:
            durationInMinutes: 2.3021358869347655
            startDate: 5.637376656633329
          dailySunTrigger:
            durationMinutes: 0.8008281904610115
            days:
            - sunday
            - sunday
            sunTrigger: sunrise
        setLock: LOCK_ON
        triggerDirectAction:
          minionStatus:
            airConditioning:
              mode: hot
              temperature: 17
              fanStrength: null
              status: null
            temperatureSensor:
              temperature: 2.027123023002322
              status: null
            light:
              brightness: 60
              status: null
            cleaner:
              mode: dock
              fanSpeed: low
              status: null
            toggle:
              status: "on"
            temperatureLight:
              brightness: 15
              temperature: 60
              status: null
            roller:
              status: null
              direction: up
            colorLight:
              red: 180
              brightness: 56
              green: 237
              blue: 92
              temperature: 23
              status: null
            switch:
              status: null
          minionId: minionId
        triggerOperationId: triggerOperationId
        timingId: timingId
        overrideLock: true
        timingName: timingName
        timingType: dailySunTrigger
        isActive: true
    OperationResult:
      required:
      - minionId
      type: object
      properties:
        minionId:
          type: string
          description: Minion Id.
        error:
          $ref: '#/components/schemas/ErrorResponse'
      additionalProperties: false
      description: "Operation result s, hold set minion status result per minion."
      example:
        error:
          message: message
          responseCode: 7.061401241503109
        minionId: minionId
    TimingFeed:
      required:
      - results
      - timing
      type: object
      properties:
        timing:
          $ref: '#/components/schemas/Timing'
        results:
          type: array
          items:
            $ref: '#/components/schemas/OperationResult'
      additionalProperties: false
      description: Timing feed object.
      example:
        timing:
          timingProperties:
            dailyTimeTrigger:
              hour: 13
              minutes: 8
              days:
              - null
              - null
            once:
              date: 5.962133916683182
            timeout:
              durationInMinutes: 2.3021358869347655
              startDate: 5.637376656633329
            dailySunTrigger:
              durationMinutes: 0.8008281904610115
              days:
              - sunday
              - sunday
              sunTrigger: sunrise
          setLock: LOCK_ON
          triggerDirectAction:
            minionStatus:
              airConditioning:
                mode: hot
                temperature: 17
                fanStrength: null
                status: null
              temperatureSensor:
                temperature: 2.027123023002322
                status: null
              light:
                brightness: 60
                status: null
              cleaner:
                mode: dock
                fanSpeed: low
                status: null
              toggle:
                status: "on"
              temperatureLight:
                brightness: 15
                temperature: 60
                status: null
              roller:
                status: null
                direction: up
              colorLight:
                red: 180
                brightness: 56
                green: 237
                blue: 92
                temperature: 23
                status: null
              switch:
                status: null
            minionId: minionId
          triggerOperationId: triggerOperationId
          timingId: timingId
          overrideLock: true
          timingName: timingName
          timingType: dailySunTrigger
          isActive: true
        results:
        - error:
            message: message
            responseCode: 7.061401241503109
          minionId: minionId
        - error:
            message: message
            responseCode: 7.061401241503109
          minionId: minionId
    MinionTimeline:
      required:
      - minionId
      - status
      - timestamp
      - trigger
      type: object
      properties:
        minionId:
          type: string
        timestamp:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/MinionStatus'
        trigger:
          $ref: '#/components/schemas/MinionChangeTrigger'
        user:
          $ref: '#/components/schemas/MinionTimeline_user'
      additionalProperties: false
      description: Minion timeline node
      example:
        trigger: user
        user:
          name: name
          email: email
        minionId: minionId
        timestamp: 0.8008281904610115
        status:
          airConditioning:
            mode: hot
            temperature: 17
            fanStrength: null
            status: null
          temperatureSensor:
            temperature: 2.027123023002322
            status: null
          light:
            brightness: 60
            status: null
          cleaner:
            mode: dock
            fanSpeed: low
            status: null
          toggle:
            status: "on"
          temperatureLight:
            brightness: 15
            temperature: 60
            status: null
          roller:
            status: null
            direction: up
          colorLight:
            red: 180
            brightness: 56
            green: 237
            blue: 92
            temperature: 23
            status: null
          switch:
            status: null
    MinionTimeout:
      required:
      - active
      - countdownTimestamp
      - minionId
      type: object
      properties:
        minionId:
          type: string
        active:
          type: boolean
          description: IS countdown active
        countdownTimestamp:
          type: number
          description: EPOCH time when countdown started
          format: double
      additionalProperties: false
      description: Minion timeout countdown information
      example:
        countdownTimestamp: 0.8008281904610115
        active: true
        minionId: minionId
    SetMinionAutoTurnOff:
      required:
      - setAutoTurnOffMS
      type: object
      properties:
        setAutoTurnOffMS:
          type: number
          description: "The timeout duration in ms, to turn off set 0 as valse."
          format: double
      additionalProperties: false
      description: Used to change the minion auto turn off the timeout value.
    MinionRename:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The new name to set.
      additionalProperties: false
      description: Used to rename minion.
    MinionSetRoomName:
      required:
      - room
      type: object
      properties:
        room:
          type: string
          description: The new room name to set.
      additionalProperties: false
      description: Used to set minion room name.
    MinionSetDevice:
      required:
      - mac
      type: object
      properties:
        mac:
          type: string
          description: The device mac to set.
      additionalProperties: false
      description: Used to set minion physical device.
    ProgressStatus:
      type: string
      description: Long-time job status
      enum:
      - inProgress
      - finished
      - fail
    ScanningStatus:
      required:
      - scanningStatus
      type: object
      properties:
        scanningStatus:
          $ref: '#/components/schemas/ProgressStatus'
      additionalProperties: false
      description: Scanning progress status
      example:
        scanningStatus: inProgress
    Operation:
      required:
      - activities
      - operationId
      - operationName
      type: object
      properties:
        operationId:
          type: string
          description: Operation unique id.
        operationName:
          type: string
          description: Operation display name.
        activities:
          type: array
          description: Activities array.
          items:
            $ref: '#/components/schemas/OperationActivity'
      additionalProperties: false
      description: |-
        Represents an operation in the system.
        An operation is a set of activities to do.
        For example, to turn on all home light operation
        sets an array of activity for each light in the home to set light status 'on'.
      example:
        activities:
        - minionStatus:
            airConditioning:
              mode: hot
              temperature: 17
              fanStrength: null
              status: null
            temperatureSensor:
              temperature: 2.027123023002322
              status: null
            light:
              brightness: 60
              status: null
            cleaner:
              mode: dock
              fanSpeed: low
              status: null
            toggle:
              status: "on"
            temperatureLight:
              brightness: 15
              temperature: 60
              status: null
            roller:
              status: null
              direction: up
            colorLight:
              red: 180
              brightness: 56
              green: 237
              blue: 92
              temperature: 23
              status: null
            switch:
              status: null
          minionId: minionId
        - minionStatus:
            airConditioning:
              mode: hot
              temperature: 17
              fanStrength: null
              status: null
            temperatureSensor:
              temperature: 2.027123023002322
              status: null
            light:
              brightness: 60
              status: null
            cleaner:
              mode: dock
              fanSpeed: low
              status: null
            toggle:
              status: "on"
            temperatureLight:
              brightness: 15
              temperature: 60
              status: null
            roller:
              status: null
              direction: up
            colorLight:
              red: 180
              brightness: 56
              green: 237
              blue: 92
              temperature: 23
              status: null
            switch:
              status: null
          minionId: minionId
        operationId: operationId
        operationName: operationName
    CommandsRepoDevice:
      required:
      - brand
      - category
      - model
      type: object
      properties:
        brand:
          type: string
        model:
          type: string
        category:
          $ref: '#/components/schemas/MinionTypes'
      additionalProperties: false
      description: Device in commands repo project. see https://github.com/casanet/rf-commands-repo.
        API section
      example:
        model: model
        category: toggle
        brand: brand
    RemoteConnectionStatus:
      type: string
      description: Optional status on a remote connection
      enum:
      - notConfigured
      - cantReachRemoteServer
      - authorizationFail
      - localServerDisconnected
      - connectionOK
    RemoteSettings:
      required:
      - connectionKey
      - host
      type: object
      properties:
        host:
          type: string
          description: hostname / IP of the remote server
        connectionKey:
          type: string
          description: Access key for authorization local server in the remote server
        blockLogsFetchByRemote:
          type: boolean
          description: Prevent remote server from feting logs
      additionalProperties: false
      description: Remote server settings.
    UserForwardAuth:
      required:
      - code
      type: object
      properties:
        code:
          maxLength: 6
          minLength: 6
          type: string
          description: Generated code that sent to user email account
      additionalProperties: false
    UpdateResults:
      required:
      - alreadyUpToDate
      type: object
      properties:
        alreadyUpToDate:
          type: boolean
          description: Application already in the latest version
      additionalProperties: false
      description: Update version results
      example:
        alreadyUpToDate: true
    VersionUpdateStatus:
      required:
      - updateStatus
      type: object
      properties:
        updateStatus:
          $ref: '#/components/schemas/ProgressStatus'
      additionalProperties: false
      description: Version update progress status
      example:
        updateStatus: inProgress
    VersionInfo:
      required:
      - commitHash
      - timestamp
      - version
      type: object
      properties:
        version:
          type: string
          description: Latest version (Git Tag) name
        commitHash:
          type: string
          description: Current local master/HEAD commit hash
        timestamp:
          type: number
          description: Time stamp of HEAD commit in UTC format
          format: double
      additionalProperties: false
      description: Version info
      example:
        version: version
        commitHash: commitHash
        timestamp: 0.8008281904610115
    MinionTimeline_user:
      required:
      - email
      - name
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        name: name
        email: email
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    userAuth:
      type: apiKey
      name: authentication
      in: header
    adminAuth:
      type: apiKey
      name: authentication
      in: header
